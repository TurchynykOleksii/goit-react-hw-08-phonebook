{"version":3,"file":"static/js/350.c640c337.chunk.js","mappings":"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","sources":["webpack://goit-react-hw-08-phonebook/./src/components/ContactList/ContactList.module.css?1ce0","components/ContactList/ContactList.jsx","webpack://goit-react-hw-08-phonebook/./src/components/Form/Form.module.css?89ba","redux/contacts/selectors.js","components/Filter/Filter.jsx","../node_modules/nanoid/index.browser.js","components/Form/Form.jsx","pages/Contacts.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"list\":\"ContactList_list__csErn\",\"listItem\":\"ContactList_listItem__SptUx\",\"span\":\"ContactList_span__Mbz+M\",\"button\":\"ContactList_button__7kL4l\"};","import css from './ContactList.module.css';\nimport React from 'react';\nimport { PropTypes } from 'prop-types';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { deleteContact } from '../../redux/contacts/operations';\n\nexport const ContactList = () => {\n  const dispatch = useDispatch();\n\n  const contacts = useSelector(state => {\n    return state.contacts.items.filter(el => {\n      return el.name.toLowerCase().includes(state.filter.toLowerCase());\n    });\n  });\n  const del = id => {\n    dispatch(deleteContact(id));\n  };\n\n  return (\n    <div>\n      {contacts.length > 0 && (\n        <ul className={css.list}>\n          {contacts.map(({ id, name, number }) => {\n            return (\n              <li key={id} className={css.listItem}>\n                <span className={css.span}>\n                  {name}: {number}\n                </span>\n                <button\n                  className={css.button}\n                  type=\"button\"\n                  onClick={() => del(id)}\n                >\n                  delete\n                </button>\n              </li>\n            );\n          })}\n        </ul>\n      )}\n    </div>\n  );\n};\n\nContactList.propTypes = {\n  changeList: PropTypes.array,\n  onDeleteContact: PropTypes.func,\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"Form_form__e1yzW\",\"label\":\"Form_label__8nx+5\",\"input\":\"Form_input__FTtTw\",\"button\":\"Form_button__8NOIT\",\"span\":\"Form_span__9yyyP\"};","export const selectContacts = state => state.contacts.items;\nexport const selectFilter = state => state.filter;\n","import css from '../Form/Form.module.css';\nimport React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { changeFilter } from '../../redux/contacts/filterSlice';\nimport { PropTypes } from 'prop-types';\nimport { selectFilter } from 'redux/contacts/selectors';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(selectFilter);\n  const handleChange = e => {\n    dispatch(changeFilter(e.target.value));\n  };\n  return (\n    <div>\n      <h3>Find contacts by name</h3>\n      <input\n        className={css.input}\n        value={filter}\n        type=\"text\"\n        onChange={handleChange}\n        name=\"name\"\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        required\n      />\n    </div>\n  );\n};\n\nFilter.propTypes = {\n  filter: PropTypes.func,\n};\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n","import React, { useState } from 'react';\nimport { addContact } from 'redux/contacts/operations';\nimport { nanoid } from 'nanoid';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectContacts } from 'redux/contacts/selectors';\nimport css from './Form.module.css';\nimport { PropTypes } from 'prop-types';\n\nexport const Form = () => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n\n  const handelInputChange = e => {\n    const { name, value } = e.target;\n    if (name === 'name') setName(value);\n    if (name === 'number') setNumber(value);\n  };\n\n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n\n  const onChangeForm = e => {\n    e.preventDefault();\n    if (contacts.some(el => el.name.toLowerCase() === name.toLowerCase())) {\n      return alert(`We already have ${name}`);\n    }\n    dispatch(addContact({ name: name, number: number, id: nanoid() }));\n    reset();\n  };\n\n  return (\n    <form onSubmit={onChangeForm} className={css.form}>\n      <label className={css.label}>\n        <span className={css.span}>Name:</span>\n        <input\n          className={css.input}\n          type=\"text\"\n          name=\"name\"\n          value={name}\n          onChange={handelInputChange}\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n        />\n      </label>\n      <label className={css.label}>\n        <span className={css.span}>Phone:</span>\n        <input\n          className={css.input}\n          type=\"tel\"\n          name=\"number\"\n          value={number}\n          onChange={handelInputChange}\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n        />\n      </label>\n      <button className={css.button} type=\"submit\">\n        add contact\n      </button>\n    </form>\n  );\n};\n\nForm.propTypes = {\n  submitProps: PropTypes.func,\n};\n","import { ContactList } from 'components/ContactList/ContactList';\nimport { Filter } from 'components/Filter/Filter';\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectContacts } from '../redux/contacts//selectors';\n\nimport { useEffect } from 'react';\nimport { requestContacts } from 'redux/contacts//operations';\nimport { Form } from 'components/Form/Form';\n\nconst Contacts = () => {\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(requestContacts());\n  }, [dispatch]);\n\n  return (\n    <div className=\"contacts\">\n      <div>\n        <h1>Phonebook</h1>\n        <Form />\n      </div>\n      <div>\n        <h2>Contacts</h2>\n        {contacts.length ? (\n          <>\n            <Filter />\n            <ContactList />\n          </>\n        ) : (\n          <p>You dont have any contacts yet</p>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default Contacts;\n"],"names":["ContactList","dispatch","useDispatch","contacts","useSelector","state","items","filter","el","name","toLowerCase","includes","length","className","css","map","id","number","type","onClick","deleteContact","del","selectContacts","selectFilter","Filter","value","onChange","e","changeFilter","target","pattern","title","required","nanoid","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase","Form","useState","setName","setNumber","handelInputChange","onSubmit","preventDefault","some","alert","addContact","useEffect","requestContacts"],"sourceRoot":""}